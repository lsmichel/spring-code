package com.gecko.jee.enterprise.mft.web.view;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import com.gecko.jee.enterprise.mft.persistence.entity.contexte.ValeurDeParam√®tre;
import com.gecko.jee.enterprise.mft.persistence.entity.instance.CommandeCoucheHaute;
import com.gecko.jee.enterprise.mft.persistence.entity.protocole.Param√®tre;
import com.gecko.jee.enterprise.mft.web.view.template.AbstractViewTemplate;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.html.Paragraph;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.router.RouteAlias;

/**
 * <b>Description: Dashboard g√©n√©ral, il pr√©sente diff√©rentes sections sur les
 * flux en cours/pass√©s.</b>
 * <p>
 * </p>
 *
 * @RouteAlias: permet d'indiquer que cette view est affich√©e par d√©faut apr√®s
 *              le login.
 *
 * @author GECKO SOFTWARE
 */
@RouteAlias(value = "", layout = MainLayout.class)
@Route(value = "dashboard", layout = MainLayout.class)
@PageTitle("Dashboard | MFT X-Protocols")
public class DashboardView extends AbstractViewTemplate {
	/**
	 * Serial UID
	 */
	private static final long serialVersionUID = -3998975278831848979L;
	private final Grid<CommandeCoucheHaute> commandeCoucheHauteGrid;

	public DashboardView() {
		this.add(new H2("This place intentionally left empty"));
		this.add(new Paragraph("Vue Dashboard des transferts de fichiers ü§ó"));

		this.setSizeFull();
		this.setJustifyContentMode(JustifyContentMode.CENTER);
		this.setDefaultHorizontalComponentAlignment(Alignment.CENTER);
		this.getStyle().set("text-align", "center");
		this.commandeCoucheHauteGrid = new Grid<>(CommandeCoucheHaute.class, false);
		this.commandeCoucheHauteGrid.addComponentColumn(cmd -> {
			final List<String> valeurDeParam√®treItems = cmd.getValuationLocale_s().stream()
					.map(valParam -> valParam.getValeurS√©rialis√©eChnCar() + " " + valParam.getIdentEtType().getIdent())
					.collect(Collectors.toList());
			final ComboBox<String> valeurDeParam√®treCombo = new ComboBox<>();
			valeurDeParam√®treCombo.setItems(valeurDeParam√®treItems);
			return valeurDeParam√®treCombo;

		}).setHeader("valeur de param√®tre");
		final Param√®tre param√®tre1 = new Param√®tre();
		param√®tre1.setIdent("chemin fichier");
		final ValeurDeParam√®tre valeurDeParam√®tre1 = new ValeurDeParam√®tre();
		valeurDeParam√®tre1.setIdentEtType(param√®tre1);
		valeurDeParam√®tre1.setValeurS√©rialis√©eChnCar("test1");

		final Param√®tre param√®tre2 = new Param√®tre();
		param√®tre2.setIdent("destination fichier");
		final ValeurDeParam√®tre valeurDeParam√®tre2 = new ValeurDeParam√®tre();
		valeurDeParam√®tre2.setIdentEtType(param√®tre2);
		valeurDeParam√®tre2.setValeurS√©rialis√©eChnCar("test2");

		final Param√®tre param√®tre3 = new Param√®tre();
		param√®tre3.setIdent("ip adresse");
		final ValeurDeParam√®tre valeurDeParam√®tre3 = new ValeurDeParam√®tre();
		valeurDeParam√®tre3.setIdentEtType(param√®tre3);
		valeurDeParam√®tre3.setValeurS√©rialis√©eChnCar("test3");
		final CommandeCoucheHaute CommandeCoucheHaute1 = new CommandeCoucheHaute();
		CommandeCoucheHaute1
				.setValuationLocale_s(Arrays.asList(valeurDeParam√®tre2, valeurDeParam√®tre1, valeurDeParam√®tre3));
		this.commandeCoucheHauteGrid.setItems(Arrays.asList(CommandeCoucheHaute1, CommandeCoucheHaute1));
		this.add(this.commandeCoucheHauteGrid);
	}
}
